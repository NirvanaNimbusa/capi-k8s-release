// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/capi-k8s-release/src/registry-buddy/image"
)

type DockerhubClient struct {
	DeleteRepoStub        func(string, string) error
	deleteRepoMutex       sync.RWMutex
	deleteRepoArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteRepoReturns struct {
		result1 error
	}
	deleteRepoReturnsOnCall map[int]struct {
		result1 error
	}
	GetAuthorizationTokenStub        func(string, string) (string, error)
	getAuthorizationTokenMutex       sync.RWMutex
	getAuthorizationTokenArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getAuthorizationTokenReturns struct {
		result1 string
		result2 error
	}
	getAuthorizationTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DockerhubClient) DeleteRepo(arg1 string, arg2 string) error {
	fake.deleteRepoMutex.Lock()
	ret, specificReturn := fake.deleteRepoReturnsOnCall[len(fake.deleteRepoArgsForCall)]
	fake.deleteRepoArgsForCall = append(fake.deleteRepoArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DeleteRepo", []interface{}{arg1, arg2})
	fake.deleteRepoMutex.Unlock()
	if fake.DeleteRepoStub != nil {
		return fake.DeleteRepoStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteRepoReturns
	return fakeReturns.result1
}

func (fake *DockerhubClient) DeleteRepoCallCount() int {
	fake.deleteRepoMutex.RLock()
	defer fake.deleteRepoMutex.RUnlock()
	return len(fake.deleteRepoArgsForCall)
}

func (fake *DockerhubClient) DeleteRepoCalls(stub func(string, string) error) {
	fake.deleteRepoMutex.Lock()
	defer fake.deleteRepoMutex.Unlock()
	fake.DeleteRepoStub = stub
}

func (fake *DockerhubClient) DeleteRepoArgsForCall(i int) (string, string) {
	fake.deleteRepoMutex.RLock()
	defer fake.deleteRepoMutex.RUnlock()
	argsForCall := fake.deleteRepoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *DockerhubClient) DeleteRepoReturns(result1 error) {
	fake.deleteRepoMutex.Lock()
	defer fake.deleteRepoMutex.Unlock()
	fake.DeleteRepoStub = nil
	fake.deleteRepoReturns = struct {
		result1 error
	}{result1}
}

func (fake *DockerhubClient) DeleteRepoReturnsOnCall(i int, result1 error) {
	fake.deleteRepoMutex.Lock()
	defer fake.deleteRepoMutex.Unlock()
	fake.DeleteRepoStub = nil
	if fake.deleteRepoReturnsOnCall == nil {
		fake.deleteRepoReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteRepoReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DockerhubClient) GetAuthorizationToken(arg1 string, arg2 string) (string, error) {
	fake.getAuthorizationTokenMutex.Lock()
	ret, specificReturn := fake.getAuthorizationTokenReturnsOnCall[len(fake.getAuthorizationTokenArgsForCall)]
	fake.getAuthorizationTokenArgsForCall = append(fake.getAuthorizationTokenArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetAuthorizationToken", []interface{}{arg1, arg2})
	fake.getAuthorizationTokenMutex.Unlock()
	if fake.GetAuthorizationTokenStub != nil {
		return fake.GetAuthorizationTokenStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAuthorizationTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *DockerhubClient) GetAuthorizationTokenCallCount() int {
	fake.getAuthorizationTokenMutex.RLock()
	defer fake.getAuthorizationTokenMutex.RUnlock()
	return len(fake.getAuthorizationTokenArgsForCall)
}

func (fake *DockerhubClient) GetAuthorizationTokenCalls(stub func(string, string) (string, error)) {
	fake.getAuthorizationTokenMutex.Lock()
	defer fake.getAuthorizationTokenMutex.Unlock()
	fake.GetAuthorizationTokenStub = stub
}

func (fake *DockerhubClient) GetAuthorizationTokenArgsForCall(i int) (string, string) {
	fake.getAuthorizationTokenMutex.RLock()
	defer fake.getAuthorizationTokenMutex.RUnlock()
	argsForCall := fake.getAuthorizationTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *DockerhubClient) GetAuthorizationTokenReturns(result1 string, result2 error) {
	fake.getAuthorizationTokenMutex.Lock()
	defer fake.getAuthorizationTokenMutex.Unlock()
	fake.GetAuthorizationTokenStub = nil
	fake.getAuthorizationTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DockerhubClient) GetAuthorizationTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.getAuthorizationTokenMutex.Lock()
	defer fake.getAuthorizationTokenMutex.Unlock()
	fake.GetAuthorizationTokenStub = nil
	if fake.getAuthorizationTokenReturnsOnCall == nil {
		fake.getAuthorizationTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAuthorizationTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DockerhubClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteRepoMutex.RLock()
	defer fake.deleteRepoMutex.RUnlock()
	fake.getAuthorizationTokenMutex.RLock()
	defer fake.getAuthorizationTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DockerhubClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ image.DockerhubClient = new(DockerhubClient)
