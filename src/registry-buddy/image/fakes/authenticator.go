// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/google/go-containerregistry/pkg/authn"
)

type Authenticator struct {
	AuthorizationStub        func() (*authn.AuthConfig, error)
	authorizationMutex       sync.RWMutex
	authorizationArgsForCall []struct {
	}
	authorizationReturns struct {
		result1 *authn.AuthConfig
		result2 error
	}
	authorizationReturnsOnCall map[int]struct {
		result1 *authn.AuthConfig
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Authenticator) Authorization() (*authn.AuthConfig, error) {
	fake.authorizationMutex.Lock()
	ret, specificReturn := fake.authorizationReturnsOnCall[len(fake.authorizationArgsForCall)]
	fake.authorizationArgsForCall = append(fake.authorizationArgsForCall, struct {
	}{})
	fake.recordInvocation("Authorization", []interface{}{})
	fake.authorizationMutex.Unlock()
	if fake.AuthorizationStub != nil {
		return fake.AuthorizationStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.authorizationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Authenticator) AuthorizationCallCount() int {
	fake.authorizationMutex.RLock()
	defer fake.authorizationMutex.RUnlock()
	return len(fake.authorizationArgsForCall)
}

func (fake *Authenticator) AuthorizationCalls(stub func() (*authn.AuthConfig, error)) {
	fake.authorizationMutex.Lock()
	defer fake.authorizationMutex.Unlock()
	fake.AuthorizationStub = stub
}

func (fake *Authenticator) AuthorizationReturns(result1 *authn.AuthConfig, result2 error) {
	fake.authorizationMutex.Lock()
	defer fake.authorizationMutex.Unlock()
	fake.AuthorizationStub = nil
	fake.authorizationReturns = struct {
		result1 *authn.AuthConfig
		result2 error
	}{result1, result2}
}

func (fake *Authenticator) AuthorizationReturnsOnCall(i int, result1 *authn.AuthConfig, result2 error) {
	fake.authorizationMutex.Lock()
	defer fake.authorizationMutex.Unlock()
	fake.AuthorizationStub = nil
	if fake.authorizationReturnsOnCall == nil {
		fake.authorizationReturnsOnCall = make(map[int]struct {
			result1 *authn.AuthConfig
			result2 error
		})
	}
	fake.authorizationReturnsOnCall[i] = struct {
		result1 *authn.AuthConfig
		result2 error
	}{result1, result2}
}

func (fake *Authenticator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authorizationMutex.RLock()
	defer fake.authorizationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Authenticator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ authn.Authenticator = new(Authenticator)
