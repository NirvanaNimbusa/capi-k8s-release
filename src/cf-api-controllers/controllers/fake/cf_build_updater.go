// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"code.cloudfoundry.org/capi-k8s-release/src/cf-api-controllers/cf/model"
	"code.cloudfoundry.org/capi-k8s-release/src/cf-api-controllers/controllers"
)

type CFBuildUpdater struct {
	UpdateBuildStub        func(string, model.Build) error
	updateBuildMutex       sync.RWMutex
	updateBuildArgsForCall []struct {
		arg1 string
		arg2 model.Build
	}
	updateBuildReturns struct {
		result1 error
	}
	updateBuildReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CFBuildUpdater) UpdateBuild(arg1 string, arg2 model.Build) error {
	fake.updateBuildMutex.Lock()
	ret, specificReturn := fake.updateBuildReturnsOnCall[len(fake.updateBuildArgsForCall)]
	fake.updateBuildArgsForCall = append(fake.updateBuildArgsForCall, struct {
		arg1 string
		arg2 model.Build
	}{arg1, arg2})
	fake.recordInvocation("UpdateBuild", []interface{}{arg1, arg2})
	fake.updateBuildMutex.Unlock()
	if fake.UpdateBuildStub != nil {
		return fake.UpdateBuildStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateBuildReturns
	return fakeReturns.result1
}

func (fake *CFBuildUpdater) UpdateBuildCallCount() int {
	fake.updateBuildMutex.RLock()
	defer fake.updateBuildMutex.RUnlock()
	return len(fake.updateBuildArgsForCall)
}

func (fake *CFBuildUpdater) UpdateBuildCalls(stub func(string, model.Build) error) {
	fake.updateBuildMutex.Lock()
	defer fake.updateBuildMutex.Unlock()
	fake.UpdateBuildStub = stub
}

func (fake *CFBuildUpdater) UpdateBuildArgsForCall(i int) (string, model.Build) {
	fake.updateBuildMutex.RLock()
	defer fake.updateBuildMutex.RUnlock()
	argsForCall := fake.updateBuildArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CFBuildUpdater) UpdateBuildReturns(result1 error) {
	fake.updateBuildMutex.Lock()
	defer fake.updateBuildMutex.Unlock()
	fake.UpdateBuildStub = nil
	fake.updateBuildReturns = struct {
		result1 error
	}{result1}
}

func (fake *CFBuildUpdater) UpdateBuildReturnsOnCall(i int, result1 error) {
	fake.updateBuildMutex.Lock()
	defer fake.updateBuildMutex.Unlock()
	fake.UpdateBuildStub = nil
	if fake.updateBuildReturnsOnCall == nil {
		fake.updateBuildReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateBuildReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CFBuildUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateBuildMutex.RLock()
	defer fake.updateBuildMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CFBuildUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.CfBuildUpdater = new(CFBuildUpdater)
