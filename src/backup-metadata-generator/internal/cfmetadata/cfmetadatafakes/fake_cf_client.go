// Code generated by counterfeiter. DO NOT EDIT.
package cfmetadatafakes

import (
	"sync"

	"code.cloudfoundry.org/capi-k8s-release/src/backup-metadata-generator/internal/cfmetadata"
)

type FakeCfClient struct {
	AppsStub        func() ([]cfmetadata.App, error)
	appsMutex       sync.RWMutex
	appsArgsForCall []struct {
	}
	appsReturns struct {
		result1 []cfmetadata.App
		result2 error
	}
	appsReturnsOnCall map[int]struct {
		result1 []cfmetadata.App
		result2 error
	}
	OrgsStub        func() ([]cfmetadata.Org, error)
	orgsMutex       sync.RWMutex
	orgsArgsForCall []struct {
	}
	orgsReturns struct {
		result1 []cfmetadata.Org
		result2 error
	}
	orgsReturnsOnCall map[int]struct {
		result1 []cfmetadata.Org
		result2 error
	}
	SpacesStub        func() ([]cfmetadata.Space, error)
	spacesMutex       sync.RWMutex
	spacesArgsForCall []struct {
	}
	spacesReturns struct {
		result1 []cfmetadata.Space
		result2 error
	}
	spacesReturnsOnCall map[int]struct {
		result1 []cfmetadata.Space
		result2 error
	}
	UsersStub        func() ([]cfmetadata.User, error)
	usersMutex       sync.RWMutex
	usersArgsForCall []struct {
	}
	usersReturns struct {
		result1 []cfmetadata.User
		result2 error
	}
	usersReturnsOnCall map[int]struct {
		result1 []cfmetadata.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCfClient) Apps() ([]cfmetadata.App, error) {
	fake.appsMutex.Lock()
	ret, specificReturn := fake.appsReturnsOnCall[len(fake.appsArgsForCall)]
	fake.appsArgsForCall = append(fake.appsArgsForCall, struct {
	}{})
	fake.recordInvocation("Apps", []interface{}{})
	fake.appsMutex.Unlock()
	if fake.AppsStub != nil {
		return fake.AppsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.appsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCfClient) AppsCallCount() int {
	fake.appsMutex.RLock()
	defer fake.appsMutex.RUnlock()
	return len(fake.appsArgsForCall)
}

func (fake *FakeCfClient) AppsCalls(stub func() ([]cfmetadata.App, error)) {
	fake.appsMutex.Lock()
	defer fake.appsMutex.Unlock()
	fake.AppsStub = stub
}

func (fake *FakeCfClient) AppsReturns(result1 []cfmetadata.App, result2 error) {
	fake.appsMutex.Lock()
	defer fake.appsMutex.Unlock()
	fake.AppsStub = nil
	fake.appsReturns = struct {
		result1 []cfmetadata.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCfClient) AppsReturnsOnCall(i int, result1 []cfmetadata.App, result2 error) {
	fake.appsMutex.Lock()
	defer fake.appsMutex.Unlock()
	fake.AppsStub = nil
	if fake.appsReturnsOnCall == nil {
		fake.appsReturnsOnCall = make(map[int]struct {
			result1 []cfmetadata.App
			result2 error
		})
	}
	fake.appsReturnsOnCall[i] = struct {
		result1 []cfmetadata.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCfClient) Orgs() ([]cfmetadata.Org, error) {
	fake.orgsMutex.Lock()
	ret, specificReturn := fake.orgsReturnsOnCall[len(fake.orgsArgsForCall)]
	fake.orgsArgsForCall = append(fake.orgsArgsForCall, struct {
	}{})
	fake.recordInvocation("Orgs", []interface{}{})
	fake.orgsMutex.Unlock()
	if fake.OrgsStub != nil {
		return fake.OrgsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.orgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCfClient) OrgsCallCount() int {
	fake.orgsMutex.RLock()
	defer fake.orgsMutex.RUnlock()
	return len(fake.orgsArgsForCall)
}

func (fake *FakeCfClient) OrgsCalls(stub func() ([]cfmetadata.Org, error)) {
	fake.orgsMutex.Lock()
	defer fake.orgsMutex.Unlock()
	fake.OrgsStub = stub
}

func (fake *FakeCfClient) OrgsReturns(result1 []cfmetadata.Org, result2 error) {
	fake.orgsMutex.Lock()
	defer fake.orgsMutex.Unlock()
	fake.OrgsStub = nil
	fake.orgsReturns = struct {
		result1 []cfmetadata.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCfClient) OrgsReturnsOnCall(i int, result1 []cfmetadata.Org, result2 error) {
	fake.orgsMutex.Lock()
	defer fake.orgsMutex.Unlock()
	fake.OrgsStub = nil
	if fake.orgsReturnsOnCall == nil {
		fake.orgsReturnsOnCall = make(map[int]struct {
			result1 []cfmetadata.Org
			result2 error
		})
	}
	fake.orgsReturnsOnCall[i] = struct {
		result1 []cfmetadata.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCfClient) Spaces() ([]cfmetadata.Space, error) {
	fake.spacesMutex.Lock()
	ret, specificReturn := fake.spacesReturnsOnCall[len(fake.spacesArgsForCall)]
	fake.spacesArgsForCall = append(fake.spacesArgsForCall, struct {
	}{})
	fake.recordInvocation("Spaces", []interface{}{})
	fake.spacesMutex.Unlock()
	if fake.SpacesStub != nil {
		return fake.SpacesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.spacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCfClient) SpacesCallCount() int {
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	return len(fake.spacesArgsForCall)
}

func (fake *FakeCfClient) SpacesCalls(stub func() ([]cfmetadata.Space, error)) {
	fake.spacesMutex.Lock()
	defer fake.spacesMutex.Unlock()
	fake.SpacesStub = stub
}

func (fake *FakeCfClient) SpacesReturns(result1 []cfmetadata.Space, result2 error) {
	fake.spacesMutex.Lock()
	defer fake.spacesMutex.Unlock()
	fake.SpacesStub = nil
	fake.spacesReturns = struct {
		result1 []cfmetadata.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCfClient) SpacesReturnsOnCall(i int, result1 []cfmetadata.Space, result2 error) {
	fake.spacesMutex.Lock()
	defer fake.spacesMutex.Unlock()
	fake.SpacesStub = nil
	if fake.spacesReturnsOnCall == nil {
		fake.spacesReturnsOnCall = make(map[int]struct {
			result1 []cfmetadata.Space
			result2 error
		})
	}
	fake.spacesReturnsOnCall[i] = struct {
		result1 []cfmetadata.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCfClient) Users() ([]cfmetadata.User, error) {
	fake.usersMutex.Lock()
	ret, specificReturn := fake.usersReturnsOnCall[len(fake.usersArgsForCall)]
	fake.usersArgsForCall = append(fake.usersArgsForCall, struct {
	}{})
	fake.recordInvocation("Users", []interface{}{})
	fake.usersMutex.Unlock()
	if fake.UsersStub != nil {
		return fake.UsersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.usersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCfClient) UsersCallCount() int {
	fake.usersMutex.RLock()
	defer fake.usersMutex.RUnlock()
	return len(fake.usersArgsForCall)
}

func (fake *FakeCfClient) UsersCalls(stub func() ([]cfmetadata.User, error)) {
	fake.usersMutex.Lock()
	defer fake.usersMutex.Unlock()
	fake.UsersStub = stub
}

func (fake *FakeCfClient) UsersReturns(result1 []cfmetadata.User, result2 error) {
	fake.usersMutex.Lock()
	defer fake.usersMutex.Unlock()
	fake.UsersStub = nil
	fake.usersReturns = struct {
		result1 []cfmetadata.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCfClient) UsersReturnsOnCall(i int, result1 []cfmetadata.User, result2 error) {
	fake.usersMutex.Lock()
	defer fake.usersMutex.Unlock()
	fake.UsersStub = nil
	if fake.usersReturnsOnCall == nil {
		fake.usersReturnsOnCall = make(map[int]struct {
			result1 []cfmetadata.User
			result2 error
		})
	}
	fake.usersReturnsOnCall[i] = struct {
		result1 []cfmetadata.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCfClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appsMutex.RLock()
	defer fake.appsMutex.RUnlock()
	fake.orgsMutex.RLock()
	defer fake.orgsMutex.RUnlock()
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	fake.usersMutex.RLock()
	defer fake.usersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCfClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfmetadata.CfClient = new(FakeCfClient)
